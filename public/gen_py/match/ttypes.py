#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ClientInMsg1vN:
  """
  Attributes:
   - msg_type
   - dev_id
   - uuid
   - pic
   - pic_size
   - max_face
   - dbno
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'msg_type', None, None, ), # 1
    (2, TType.I32, 'dev_id', None, None, ), # 2
    (3, TType.STRING, 'uuid', None, None, ), # 3
    (4, TType.STRING, 'pic', None, None, ), # 4
    (5, TType.I32, 'pic_size', None, None, ), # 5
    (6, TType.I32, 'max_face', None, None, ), # 6
    (7, TType.I32, 'dbno', None, None, ), # 7
  )

  def __init__(self, msg_type=None, dev_id=None, uuid=None, pic=None, pic_size=None, max_face=None, dbno=None,):
    self.msg_type = msg_type
    self.dev_id = dev_id
    self.uuid = uuid
    self.pic = pic
    self.pic_size = pic_size
    self.max_face = max_face
    self.dbno = dbno

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.msg_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.max_face = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.dbno = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientInMsg1vN')
    if self.msg_type is not None:
      oprot.writeFieldBegin('msg_type', TType.I32, 1)
      oprot.writeI32(self.msg_type)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 2)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 3)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 4)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.pic_size is not None:
      oprot.writeFieldBegin('pic_size', TType.I32, 5)
      oprot.writeI32(self.pic_size)
      oprot.writeFieldEnd()
    if self.max_face is not None:
      oprot.writeFieldBegin('max_face', TType.I32, 6)
      oprot.writeI32(self.max_face)
      oprot.writeFieldEnd()
    if self.dbno is not None:
      oprot.writeFieldBegin('dbno', TType.I32, 7)
      oprot.writeI32(self.dbno)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg_type)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.pic_size)
    value = (value * 31) ^ hash(self.max_face)
    value = (value * 31) ^ hash(self.dbno)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientInMsg1v1:
  """
  Attributes:
   - face_no
   - type
   - dev_id
   - uuid
   - pic
   - pic_size
   - feature
   - cap_uuid
   - cap_pic
   - cap_pic_size
   - person_id
   - person_name
   - threshold
   - is_last
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'face_no', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'dev_id', None, None, ), # 3
    (4, TType.STRING, 'uuid', None, None, ), # 4
    (5, TType.STRING, 'pic', None, None, ), # 5
    (6, TType.I32, 'pic_size', None, None, ), # 6
    (7, TType.STRING, 'feature', None, None, ), # 7
    (8, TType.STRING, 'cap_uuid', None, None, ), # 8
    (9, TType.STRING, 'cap_pic', None, None, ), # 9
    (10, TType.I32, 'cap_pic_size', None, None, ), # 10
    (11, TType.STRING, 'person_id', None, None, ), # 11
    (12, TType.STRING, 'person_name', None, None, ), # 12
    (13, TType.DOUBLE, 'threshold', None, None, ), # 13
    (14, TType.I32, 'is_last', None, None, ), # 14
  )

  def __init__(self, face_no=None, type=None, dev_id=None, uuid=None, pic=None, pic_size=None, feature=None, cap_uuid=None, cap_pic=None, cap_pic_size=None, person_id=None, person_name=None, threshold=None, is_last=None,):
    self.face_no = face_no
    self.type = type
    self.dev_id = dev_id
    self.uuid = uuid
    self.pic = pic
    self.pic_size = pic_size
    self.feature = feature
    self.cap_uuid = cap_uuid
    self.cap_pic = cap_pic
    self.cap_pic_size = cap_pic_size
    self.person_id = person_id
    self.person_name = person_name
    self.threshold = threshold
    self.is_last = is_last

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.face_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.dev_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.feature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.cap_uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.cap_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.cap_pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.person_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.person_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.threshold = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.is_last = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientInMsg1v1')
    if self.face_no is not None:
      oprot.writeFieldBegin('face_no', TType.I32, 1)
      oprot.writeI32(self.face_no)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.dev_id is not None:
      oprot.writeFieldBegin('dev_id', TType.I32, 3)
      oprot.writeI32(self.dev_id)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 4)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 5)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.pic_size is not None:
      oprot.writeFieldBegin('pic_size', TType.I32, 6)
      oprot.writeI32(self.pic_size)
      oprot.writeFieldEnd()
    if self.feature is not None:
      oprot.writeFieldBegin('feature', TType.STRING, 7)
      oprot.writeString(self.feature)
      oprot.writeFieldEnd()
    if self.cap_uuid is not None:
      oprot.writeFieldBegin('cap_uuid', TType.STRING, 8)
      oprot.writeString(self.cap_uuid)
      oprot.writeFieldEnd()
    if self.cap_pic is not None:
      oprot.writeFieldBegin('cap_pic', TType.STRING, 9)
      oprot.writeString(self.cap_pic)
      oprot.writeFieldEnd()
    if self.cap_pic_size is not None:
      oprot.writeFieldBegin('cap_pic_size', TType.I32, 10)
      oprot.writeI32(self.cap_pic_size)
      oprot.writeFieldEnd()
    if self.person_id is not None:
      oprot.writeFieldBegin('person_id', TType.STRING, 11)
      oprot.writeString(self.person_id)
      oprot.writeFieldEnd()
    if self.person_name is not None:
      oprot.writeFieldBegin('person_name', TType.STRING, 12)
      oprot.writeString(self.person_name)
      oprot.writeFieldEnd()
    if self.threshold is not None:
      oprot.writeFieldBegin('threshold', TType.DOUBLE, 13)
      oprot.writeDouble(self.threshold)
      oprot.writeFieldEnd()
    if self.is_last is not None:
      oprot.writeFieldBegin('is_last', TType.I32, 14)
      oprot.writeI32(self.is_last)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.face_no)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.dev_id)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.pic_size)
    value = (value * 31) ^ hash(self.feature)
    value = (value * 31) ^ hash(self.cap_uuid)
    value = (value * 31) ^ hash(self.cap_pic)
    value = (value * 31) ^ hash(self.cap_pic_size)
    value = (value * 31) ^ hash(self.person_id)
    value = (value * 31) ^ hash(self.person_name)
    value = (value * 31) ^ hash(self.threshold)
    value = (value * 31) ^ hash(self.is_last)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MatchPicReturn:
  """
  Attributes:
   - msg_type
   - match_type
   - left
   - top
   - right
   - bottom
   - person_id
   - person_name
   - db_pic
   - db_pic_size
   - face_db
   - success_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'msg_type', None, None, ), # 1
    (2, TType.I32, 'match_type', None, None, ), # 2
    (3, TType.I32, 'left', None, None, ), # 3
    (4, TType.I32, 'top', None, None, ), # 4
    (5, TType.I32, 'right', None, None, ), # 5
    (6, TType.I32, 'bottom', None, None, ), # 6
    (7, TType.STRING, 'person_id', None, None, ), # 7
    (8, TType.STRING, 'person_name', None, None, ), # 8
    (9, TType.STRING, 'db_pic', None, None, ), # 9
    (10, TType.I32, 'db_pic_size', None, None, ), # 10
    (11, TType.I32, 'face_db', None, None, ), # 11
    None, # 12
    (13, TType.I32, 'success_flag', None, None, ), # 13
  )

  def __init__(self, msg_type=None, match_type=None, left=None, top=None, right=None, bottom=None, person_id=None, person_name=None, db_pic=None, db_pic_size=None, face_db=None, success_flag=None,):
    self.msg_type = msg_type
    self.match_type = match_type
    self.left = left
    self.top = top
    self.right = right
    self.bottom = bottom
    self.person_id = person_id
    self.person_name = person_name
    self.db_pic = db_pic
    self.db_pic_size = db_pic_size
    self.face_db = face_db
    self.success_flag = success_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.msg_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.match_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.left = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.top = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.right = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.bottom = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.person_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.person_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.db_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.db_pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.face_db = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.success_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MatchPicReturn')
    if self.msg_type is not None:
      oprot.writeFieldBegin('msg_type', TType.I32, 1)
      oprot.writeI32(self.msg_type)
      oprot.writeFieldEnd()
    if self.match_type is not None:
      oprot.writeFieldBegin('match_type', TType.I32, 2)
      oprot.writeI32(self.match_type)
      oprot.writeFieldEnd()
    if self.left is not None:
      oprot.writeFieldBegin('left', TType.I32, 3)
      oprot.writeI32(self.left)
      oprot.writeFieldEnd()
    if self.top is not None:
      oprot.writeFieldBegin('top', TType.I32, 4)
      oprot.writeI32(self.top)
      oprot.writeFieldEnd()
    if self.right is not None:
      oprot.writeFieldBegin('right', TType.I32, 5)
      oprot.writeI32(self.right)
      oprot.writeFieldEnd()
    if self.bottom is not None:
      oprot.writeFieldBegin('bottom', TType.I32, 6)
      oprot.writeI32(self.bottom)
      oprot.writeFieldEnd()
    if self.person_id is not None:
      oprot.writeFieldBegin('person_id', TType.STRING, 7)
      oprot.writeString(self.person_id)
      oprot.writeFieldEnd()
    if self.person_name is not None:
      oprot.writeFieldBegin('person_name', TType.STRING, 8)
      oprot.writeString(self.person_name)
      oprot.writeFieldEnd()
    if self.db_pic is not None:
      oprot.writeFieldBegin('db_pic', TType.STRING, 9)
      oprot.writeString(self.db_pic)
      oprot.writeFieldEnd()
    if self.db_pic_size is not None:
      oprot.writeFieldBegin('db_pic_size', TType.I32, 10)
      oprot.writeI32(self.db_pic_size)
      oprot.writeFieldEnd()
    if self.face_db is not None:
      oprot.writeFieldBegin('face_db', TType.I32, 11)
      oprot.writeI32(self.face_db)
      oprot.writeFieldEnd()
    if self.success_flag is not None:
      oprot.writeFieldBegin('success_flag', TType.I32, 13)
      oprot.writeI32(self.success_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg_type)
    value = (value * 31) ^ hash(self.match_type)
    value = (value * 31) ^ hash(self.left)
    value = (value * 31) ^ hash(self.top)
    value = (value * 31) ^ hash(self.right)
    value = (value * 31) ^ hash(self.bottom)
    value = (value * 31) ^ hash(self.person_id)
    value = (value * 31) ^ hash(self.person_name)
    value = (value * 31) ^ hash(self.db_pic)
    value = (value * 31) ^ hash(self.db_pic_size)
    value = (value * 31) ^ hash(self.face_db)
    value = (value * 31) ^ hash(self.success_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPicFeatureAndSmallPicIn:
  """
  Attributes:
   - uuid
   - pic
   - pic_size
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'pic', None, None, ), # 2
    (3, TType.I32, 'pic_size', None, None, ), # 3
  )

  def __init__(self, uuid=None, pic=None, pic_size=None,):
    self.uuid = uuid
    self.pic = pic
    self.pic_size = pic_size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPicFeatureAndSmallPicIn')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 2)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.pic_size is not None:
      oprot.writeFieldBegin('pic_size', TType.I32, 3)
      oprot.writeI32(self.pic_size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.pic_size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPicFeatureAndSmallPicReturn:
  """
  Attributes:
   - uuid
   - pic
   - pic_size
   - feature
   - success_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'pic', None, None, ), # 2
    (3, TType.I32, 'pic_size', None, None, ), # 3
    (4, TType.STRING, 'feature', None, None, ), # 4
    (5, TType.I32, 'success_flag', None, None, ), # 5
  )

  def __init__(self, uuid=None, pic=None, pic_size=None, feature=None, success_flag=None,):
    self.uuid = uuid
    self.pic = pic
    self.pic_size = pic_size
    self.feature = feature
    self.success_flag = success_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.feature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.success_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPicFeatureAndSmallPicReturn')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 2)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.pic_size is not None:
      oprot.writeFieldBegin('pic_size', TType.I32, 3)
      oprot.writeI32(self.pic_size)
      oprot.writeFieldEnd()
    if self.feature is not None:
      oprot.writeFieldBegin('feature', TType.STRING, 4)
      oprot.writeString(self.feature)
      oprot.writeFieldEnd()
    if self.success_flag is not None:
      oprot.writeFieldBegin('success_flag', TType.I32, 5)
      oprot.writeI32(self.success_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.pic_size)
    value = (value * 31) ^ hash(self.feature)
    value = (value * 31) ^ hash(self.success_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetPersonInfoByIDOut:
  """
  Attributes:
   - person_no
   - person_id
   - person_name
   - uuid
   - pic
   - pic_size
   - feature
   - success_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'person_no', None, None, ), # 1
    (2, TType.STRING, 'person_id', None, None, ), # 2
    (3, TType.STRING, 'person_name', None, None, ), # 3
    (4, TType.STRING, 'uuid', None, None, ), # 4
    (5, TType.STRING, 'pic', None, None, ), # 5
    (6, TType.I32, 'pic_size', None, None, ), # 6
    (7, TType.STRING, 'feature', None, None, ), # 7
    (8, TType.I32, 'success_flag', None, None, ), # 8
  )

  def __init__(self, person_no=None, person_id=None, person_name=None, uuid=None, pic=None, pic_size=None, feature=None, success_flag=None,):
    self.person_no = person_no
    self.person_id = person_id
    self.person_name = person_name
    self.uuid = uuid
    self.pic = pic
    self.pic_size = pic_size
    self.feature = feature
    self.success_flag = success_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.person_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.person_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.person_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.feature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.success_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetPersonInfoByIDOut')
    if self.person_no is not None:
      oprot.writeFieldBegin('person_no', TType.I32, 1)
      oprot.writeI32(self.person_no)
      oprot.writeFieldEnd()
    if self.person_id is not None:
      oprot.writeFieldBegin('person_id', TType.STRING, 2)
      oprot.writeString(self.person_id)
      oprot.writeFieldEnd()
    if self.person_name is not None:
      oprot.writeFieldBegin('person_name', TType.STRING, 3)
      oprot.writeString(self.person_name)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 4)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 5)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.pic_size is not None:
      oprot.writeFieldBegin('pic_size', TType.I32, 6)
      oprot.writeI32(self.pic_size)
      oprot.writeFieldEnd()
    if self.feature is not None:
      oprot.writeFieldBegin('feature', TType.STRING, 7)
      oprot.writeString(self.feature)
      oprot.writeFieldEnd()
    if self.success_flag is not None:
      oprot.writeFieldBegin('success_flag', TType.I32, 8)
      oprot.writeI32(self.success_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.person_no)
    value = (value * 31) ^ hash(self.person_id)
    value = (value * 31) ^ hash(self.person_name)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.pic_size)
    value = (value * 31) ^ hash(self.feature)
    value = (value * 31) ^ hash(self.success_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class alarm_conf:
  """
  Attributes:
   - alarm_id
   - alarm_ip
   - alarm_port
   - c_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'alarm_id', None, None, ), # 1
    (2, TType.STRING, 'alarm_ip', None, None, ), # 2
    (3, TType.I16, 'alarm_port', None, None, ), # 3
    (4, TType.LIST, 'c_id_list', (TType.I32,None), None, ), # 4
  )

  def __init__(self, alarm_id=None, alarm_ip=None, alarm_port=None, c_id_list=None,):
    self.alarm_id = alarm_id
    self.alarm_ip = alarm_ip
    self.alarm_port = alarm_port
    self.c_id_list = c_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.alarm_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.alarm_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.alarm_port = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.c_id_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in range(_size0):
            _elem5 = iprot.readI32();
            self.c_id_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('alarm_conf')
    if self.alarm_id is not None:
      oprot.writeFieldBegin('alarm_id', TType.I32, 1)
      oprot.writeI32(self.alarm_id)
      oprot.writeFieldEnd()
    if self.alarm_ip is not None:
      oprot.writeFieldBegin('alarm_ip', TType.STRING, 2)
      oprot.writeString(self.alarm_ip)
      oprot.writeFieldEnd()
    if self.alarm_port is not None:
      oprot.writeFieldBegin('alarm_port', TType.I16, 3)
      oprot.writeI16(self.alarm_port)
      oprot.writeFieldEnd()
    if self.c_id_list is not None:
      oprot.writeFieldBegin('c_id_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.c_id_list))
      for iter6 in self.c_id_list:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.alarm_id)
    value = (value * 31) ^ hash(self.alarm_ip)
    value = (value * 31) ^ hash(self.alarm_port)
    value = (value * 31) ^ hash(self.c_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class match_conf:
  """
  Attributes:
   - msg_type
   - match_name
   - match_ip
   - match_port
   - face_no
   - threshold
   - clients_max
   - sql_addr
   - sql_port
   - sql_user
   - sql_pwd
   - match_result_table
   - grab_face_table
   - face_no_table
   - person_no
   - person_name
   - person_id
   - feature
   - face_pic
   - db_name
   - person_table
   - alarm_config_info
   - success_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'msg_type', None, None, ), # 1
    (2, TType.STRING, 'match_name', None, None, ), # 2
    (3, TType.STRING, 'match_ip', None, None, ), # 3
    (4, TType.I16, 'match_port', None, None, ), # 4
    (5, TType.I16, 'face_no', None, None, ), # 5
    (6, TType.DOUBLE, 'threshold', None, None, ), # 6
    (7, TType.I32, 'clients_max', None, None, ), # 7
    (8, TType.STRING, 'sql_addr', None, None, ), # 8
    (9, TType.I16, 'sql_port', None, None, ), # 9
    (10, TType.STRING, 'sql_user', None, None, ), # 10
    (11, TType.STRING, 'sql_pwd', None, None, ), # 11
    (12, TType.STRING, 'match_result_table', None, None, ), # 12
    (13, TType.STRING, 'grab_face_table', None, None, ), # 13
    (14, TType.STRING, 'face_no_table', None, None, ), # 14
    (15, TType.I32, 'person_no', None, None, ), # 15
    (16, TType.STRING, 'person_name', None, None, ), # 16
    (17, TType.STRING, 'person_id', None, None, ), # 17
    (18, TType.STRING, 'feature', None, None, ), # 18
    (19, TType.STRING, 'face_pic', None, None, ), # 19
    (20, TType.STRING, 'db_name', None, None, ), # 20
    (21, TType.STRING, 'person_table', None, None, ), # 21
    (22, TType.LIST, 'alarm_config_info', (TType.STRUCT,(alarm_conf, alarm_conf.thrift_spec)), None, ), # 22
    (23, TType.I32, 'success_flag', None, None, ), # 23
  )

  def __init__(self, msg_type=None, match_name=None, match_ip=None, match_port=None, face_no=None, threshold=None, clients_max=None, sql_addr=None, sql_port=None, sql_user=None, sql_pwd=None, match_result_table=None, grab_face_table=None, face_no_table=None, person_no=None, person_name=None, person_id=None, feature=None, face_pic=None, db_name=None, person_table=None, alarm_config_info=None, success_flag=None,):
    self.msg_type = msg_type
    self.match_name = match_name
    self.match_ip = match_ip
    self.match_port = match_port
    self.face_no = face_no
    self.threshold = threshold
    self.clients_max = clients_max
    self.sql_addr = sql_addr
    self.sql_port = sql_port
    self.sql_user = sql_user
    self.sql_pwd = sql_pwd
    self.match_result_table = match_result_table
    self.grab_face_table = grab_face_table
    self.face_no_table = face_no_table
    self.person_no = person_no
    self.person_name = person_name
    self.person_id = person_id
    self.feature = feature
    self.face_pic = face_pic
    self.db_name = db_name
    self.person_table = person_table
    self.alarm_config_info = alarm_config_info
    self.success_flag = success_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.msg_type = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.match_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.match_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.match_port = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.face_no = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.threshold = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.clients_max = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.sql_addr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.sql_port = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.sql_user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.sql_pwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.match_result_table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.grab_face_table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.face_no_table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.person_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.person_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.person_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.feature = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.face_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.db_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.person_table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.alarm_config_info = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in range(_size7):
            _elem12 = alarm_conf()
            _elem12.read(iprot)
            self.alarm_config_info.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.success_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('match_conf')
    if self.msg_type is not None:
      oprot.writeFieldBegin('msg_type', TType.BYTE, 1)
      oprot.writeByte(self.msg_type)
      oprot.writeFieldEnd()
    if self.match_name is not None:
      oprot.writeFieldBegin('match_name', TType.STRING, 2)
      oprot.writeString(self.match_name)
      oprot.writeFieldEnd()
    if self.match_ip is not None:
      oprot.writeFieldBegin('match_ip', TType.STRING, 3)
      oprot.writeString(self.match_ip)
      oprot.writeFieldEnd()
    if self.match_port is not None:
      oprot.writeFieldBegin('match_port', TType.I16, 4)
      oprot.writeI16(self.match_port)
      oprot.writeFieldEnd()
    if self.face_no is not None:
      oprot.writeFieldBegin('face_no', TType.I16, 5)
      oprot.writeI16(self.face_no)
      oprot.writeFieldEnd()
    if self.threshold is not None:
      oprot.writeFieldBegin('threshold', TType.DOUBLE, 6)
      oprot.writeDouble(self.threshold)
      oprot.writeFieldEnd()
    if self.clients_max is not None:
      oprot.writeFieldBegin('clients_max', TType.I32, 7)
      oprot.writeI32(self.clients_max)
      oprot.writeFieldEnd()
    if self.sql_addr is not None:
      oprot.writeFieldBegin('sql_addr', TType.STRING, 8)
      oprot.writeString(self.sql_addr)
      oprot.writeFieldEnd()
    if self.sql_port is not None:
      oprot.writeFieldBegin('sql_port', TType.I16, 9)
      oprot.writeI16(self.sql_port)
      oprot.writeFieldEnd()
    if self.sql_user is not None:
      oprot.writeFieldBegin('sql_user', TType.STRING, 10)
      oprot.writeString(self.sql_user)
      oprot.writeFieldEnd()
    if self.sql_pwd is not None:
      oprot.writeFieldBegin('sql_pwd', TType.STRING, 11)
      oprot.writeString(self.sql_pwd)
      oprot.writeFieldEnd()
    if self.match_result_table is not None:
      oprot.writeFieldBegin('match_result_table', TType.STRING, 12)
      oprot.writeString(self.match_result_table)
      oprot.writeFieldEnd()
    if self.grab_face_table is not None:
      oprot.writeFieldBegin('grab_face_table', TType.STRING, 13)
      oprot.writeString(self.grab_face_table)
      oprot.writeFieldEnd()
    if self.face_no_table is not None:
      oprot.writeFieldBegin('face_no_table', TType.STRING, 14)
      oprot.writeString(self.face_no_table)
      oprot.writeFieldEnd()
    if self.person_no is not None:
      oprot.writeFieldBegin('person_no', TType.I32, 15)
      oprot.writeI32(self.person_no)
      oprot.writeFieldEnd()
    if self.person_name is not None:
      oprot.writeFieldBegin('person_name', TType.STRING, 16)
      oprot.writeString(self.person_name)
      oprot.writeFieldEnd()
    if self.person_id is not None:
      oprot.writeFieldBegin('person_id', TType.STRING, 17)
      oprot.writeString(self.person_id)
      oprot.writeFieldEnd()
    if self.feature is not None:
      oprot.writeFieldBegin('feature', TType.STRING, 18)
      oprot.writeString(self.feature)
      oprot.writeFieldEnd()
    if self.face_pic is not None:
      oprot.writeFieldBegin('face_pic', TType.STRING, 19)
      oprot.writeString(self.face_pic)
      oprot.writeFieldEnd()
    if self.db_name is not None:
      oprot.writeFieldBegin('db_name', TType.STRING, 20)
      oprot.writeString(self.db_name)
      oprot.writeFieldEnd()
    if self.person_table is not None:
      oprot.writeFieldBegin('person_table', TType.STRING, 21)
      oprot.writeString(self.person_table)
      oprot.writeFieldEnd()
    if self.alarm_config_info is not None:
      oprot.writeFieldBegin('alarm_config_info', TType.LIST, 22)
      oprot.writeListBegin(TType.STRUCT, len(self.alarm_config_info))
      for iter13 in self.alarm_config_info:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.success_flag is not None:
      oprot.writeFieldBegin('success_flag', TType.I32, 23)
      oprot.writeI32(self.success_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg_type)
    value = (value * 31) ^ hash(self.match_name)
    value = (value * 31) ^ hash(self.match_ip)
    value = (value * 31) ^ hash(self.match_port)
    value = (value * 31) ^ hash(self.face_no)
    value = (value * 31) ^ hash(self.threshold)
    value = (value * 31) ^ hash(self.clients_max)
    value = (value * 31) ^ hash(self.sql_addr)
    value = (value * 31) ^ hash(self.sql_port)
    value = (value * 31) ^ hash(self.sql_user)
    value = (value * 31) ^ hash(self.sql_pwd)
    value = (value * 31) ^ hash(self.match_result_table)
    value = (value * 31) ^ hash(self.grab_face_table)
    value = (value * 31) ^ hash(self.face_no_table)
    value = (value * 31) ^ hash(self.person_no)
    value = (value * 31) ^ hash(self.person_name)
    value = (value * 31) ^ hash(self.person_id)
    value = (value * 31) ^ hash(self.feature)
    value = (value * 31) ^ hash(self.face_pic)
    value = (value * 31) ^ hash(self.db_name)
    value = (value * 31) ^ hash(self.person_table)
    value = (value * 31) ^ hash(self.alarm_config_info)
    value = (value * 31) ^ hash(self.success_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientInMsgPicSearch:
  """
  Attributes:
   - uuid
   - pic
   - face_no
   - threshold
   - pic_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'pic', None, None, ), # 2
    (3, TType.I32, 'face_no', None, None, ), # 3
    (4, TType.DOUBLE, 'threshold', None, None, ), # 4
    (5, TType.I32, 'pic_num', None, None, ), # 5
  )

  def __init__(self, uuid=None, pic=None, face_no=None, threshold=None, pic_num=None,):
    self.uuid = uuid
    self.pic = pic
    self.face_no = face_no
    self.threshold = threshold
    self.pic_num = pic_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.face_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.threshold = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pic_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientInMsgPicSearch')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 2)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.face_no is not None:
      oprot.writeFieldBegin('face_no', TType.I32, 3)
      oprot.writeI32(self.face_no)
      oprot.writeFieldEnd()
    if self.threshold is not None:
      oprot.writeFieldBegin('threshold', TType.DOUBLE, 4)
      oprot.writeDouble(self.threshold)
      oprot.writeFieldEnd()
    if self.pic_num is not None:
      oprot.writeFieldBegin('pic_num', TType.I32, 5)
      oprot.writeI32(self.pic_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.face_no)
    value = (value * 31) ^ hash(self.threshold)
    value = (value * 31) ^ hash(self.pic_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchPicInfo:
  """
  Attributes:
   - p_id
   - face_db
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'p_id', None, None, ), # 1
    (2, TType.I32, 'face_db', None, None, ), # 2
    (3, TType.DOUBLE, 'score', None, None, ), # 3
  )

  def __init__(self, p_id=None, face_db=None, score=None,):
    self.p_id = p_id
    self.face_db = face_db
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.p_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.face_db = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchPicInfo')
    if self.p_id is not None:
      oprot.writeFieldBegin('p_id', TType.I32, 1)
      oprot.writeI32(self.p_id)
      oprot.writeFieldEnd()
    if self.face_db is not None:
      oprot.writeFieldBegin('face_db', TType.I32, 2)
      oprot.writeI32(self.face_db)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 3)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.p_id)
    value = (value * 31) ^ hash(self.face_db)
    value = (value * 31) ^ hash(self.score)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PicSerchReturn:
  """
  Attributes:
   - info
   - success_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'info', (TType.STRUCT,(SearchPicInfo, SearchPicInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'success_flag', None, None, ), # 2
  )

  def __init__(self, info=None, success_flag=None,):
    self.info = info
    self.success_flag = success_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.info = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in range(_size14):
            _elem19 = SearchPicInfo()
            _elem19.read(iprot)
            self.info.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.success_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PicSerchReturn')
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.info))
      for iter20 in self.info:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.success_flag is not None:
      oprot.writeFieldBegin('success_flag', TType.I32, 2)
      oprot.writeI32(self.success_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.info)
    value = (value * 31) ^ hash(self.success_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClientInMsgVideoDetect:
  """
  Attributes:
   - msg_type
   - c_id
   - uuid
   - pic
   - pic_size
   - max_face
   - face_db_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'msg_type', None, None, ), # 1
    (2, TType.I32, 'c_id', None, None, ), # 2
    (3, TType.STRING, 'uuid', None, None, ), # 3
    (4, TType.STRING, 'pic', None, None, ), # 4
    (5, TType.I32, 'pic_size', None, None, ), # 5
    (6, TType.I32, 'max_face', None, None, ), # 6
    (7, TType.LIST, 'face_db_list', (TType.I32,None), None, ), # 7
  )

  def __init__(self, msg_type=None, c_id=None, uuid=None, pic=None, pic_size=None, max_face=None, face_db_list=None,):
    self.msg_type = msg_type
    self.c_id = c_id
    self.uuid = uuid
    self.pic = pic
    self.pic_size = pic_size
    self.max_face = max_face
    self.face_db_list = face_db_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.msg_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.c_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pic_size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.max_face = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.face_db_list = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in range(_size21):
            _elem26 = iprot.readI32();
            self.face_db_list.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClientInMsgVideoDetect')
    if self.msg_type is not None:
      oprot.writeFieldBegin('msg_type', TType.I32, 1)
      oprot.writeI32(self.msg_type)
      oprot.writeFieldEnd()
    if self.c_id is not None:
      oprot.writeFieldBegin('c_id', TType.I32, 2)
      oprot.writeI32(self.c_id)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 3)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 4)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.pic_size is not None:
      oprot.writeFieldBegin('pic_size', TType.I32, 5)
      oprot.writeI32(self.pic_size)
      oprot.writeFieldEnd()
    if self.max_face is not None:
      oprot.writeFieldBegin('max_face', TType.I32, 6)
      oprot.writeI32(self.max_face)
      oprot.writeFieldEnd()
    if self.face_db_list is not None:
      oprot.writeFieldBegin('face_db_list', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.face_db_list))
      for iter27 in self.face_db_list:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.msg_type)
    value = (value * 31) ^ hash(self.c_id)
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.pic_size)
    value = (value * 31) ^ hash(self.max_face)
    value = (value * 31) ^ hash(self.face_db_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class alarm_info:
  """
  Attributes:
   - r_id
   - res1
   - res2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'r_id', None, None, ), # 1
    (2, TType.STRING, 'res1', None, None, ), # 2
    (3, TType.STRING, 'res2', None, None, ), # 3
  )

  def __init__(self, r_id=None, res1=None, res2=None,):
    self.r_id = r_id
    self.res1 = res1
    self.res2 = res2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.r_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.res1 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.res2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('alarm_info')
    if self.r_id is not None:
      oprot.writeFieldBegin('r_id', TType.I32, 1)
      oprot.writeI32(self.r_id)
      oprot.writeFieldEnd()
    if self.res1 is not None:
      oprot.writeFieldBegin('res1', TType.STRING, 2)
      oprot.writeString(self.res1)
      oprot.writeFieldEnd()
    if self.res2 is not None:
      oprot.writeFieldBegin('res2', TType.STRING, 3)
      oprot.writeString(self.res2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.r_id)
    value = (value * 31) ^ hash(self.res1)
    value = (value * 31) ^ hash(self.res2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchGrabPicInfo:
  """
  Attributes:
   - grab_id
   - c_id
   - score
   - time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'grab_id', None, None, ), # 1
    (2, TType.I32, 'c_id', None, None, ), # 2
    (3, TType.DOUBLE, 'score', None, None, ), # 3
    (4, TType.STRING, 'time', None, None, ), # 4
  )

  def __init__(self, grab_id=None, c_id=None, score=None, time=None,):
    self.grab_id = grab_id
    self.c_id = c_id
    self.score = score
    self.time = time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.grab_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.c_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchGrabPicInfo')
    if self.grab_id is not None:
      oprot.writeFieldBegin('grab_id', TType.I32, 1)
      oprot.writeI32(self.grab_id)
      oprot.writeFieldEnd()
    if self.c_id is not None:
      oprot.writeFieldBegin('c_id', TType.I32, 2)
      oprot.writeI32(self.c_id)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 3)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.STRING, 4)
      oprot.writeString(self.time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grab_id)
    value = (value * 31) ^ hash(self.c_id)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PicSearchInGrab:
  """
  Attributes:
   - uuid
   - pic
   - c_id
   - time
   - score
   - pic_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uuid', None, None, ), # 1
    (2, TType.STRING, 'pic', None, None, ), # 2
    (3, TType.LIST, 'c_id', (TType.I32,None), None, ), # 3
    (4, TType.LIST, 'time', (TType.STRING,None), None, ), # 4
    (5, TType.DOUBLE, 'score', None, None, ), # 5
    (6, TType.I32, 'pic_num', None, None, ), # 6
  )

  def __init__(self, uuid=None, pic=None, c_id=None, time=None, score=None, pic_num=None,):
    self.uuid = uuid
    self.pic = pic
    self.c_id = c_id
    self.time = time
    self.score = score
    self.pic_num = pic_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.c_id = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in range(_size28):
            _elem33 = iprot.readI32();
            self.c_id.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.time = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in range(_size34):
            _elem39 = iprot.readString();
            self.time.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pic_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PicSearchInGrab')
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 1)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.pic is not None:
      oprot.writeFieldBegin('pic', TType.STRING, 2)
      oprot.writeString(self.pic)
      oprot.writeFieldEnd()
    if self.c_id is not None:
      oprot.writeFieldBegin('c_id', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.c_id))
      for iter40 in self.c_id:
        oprot.writeI32(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.time))
      for iter41 in self.time:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 5)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.pic_num is not None:
      oprot.writeFieldBegin('pic_num', TType.I32, 6)
      oprot.writeI32(self.pic_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uuid)
    value = (value * 31) ^ hash(self.pic)
    value = (value * 31) ^ hash(self.c_id)
    value = (value * 31) ^ hash(self.time)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.pic_num)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GrabPicSearchReturn:
  """
  Attributes:
   - info
   - success_flag
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'info', (TType.STRUCT,(SearchGrabPicInfo, SearchGrabPicInfo.thrift_spec)), None, ), # 1
    (2, TType.I32, 'success_flag', None, None, ), # 2
  )

  def __init__(self, info=None, success_flag=None,):
    self.info = info
    self.success_flag = success_flag

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.info = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in range(_size42):
            _elem47 = SearchGrabPicInfo()
            _elem47.read(iprot)
            self.info.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.success_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GrabPicSearchReturn')
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.info))
      for iter48 in self.info:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.success_flag is not None:
      oprot.writeFieldBegin('success_flag', TType.I32, 2)
      oprot.writeI32(self.success_flag)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.info)
    value = (value * 31) ^ hash(self.success_flag)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
